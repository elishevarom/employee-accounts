/* src/pages/styling.css

/* Ensure no margin or padding on body */
html, body {
    margin: 0;
    padding: 0;
    width: 100%;
    height: 100%;
}

/* Full-width background image */
.background-image-custom {
    background-image: url('../../images/homePage.png'); /* Path to your image */
    background-size: cover; /* Ensures the image covers the entire element */
    background-position: center; /* Centers the image */
    background-repeat: no-repeat; /* Prevents the image from repeating */
    position: fixed; /* Fixed positioning to ensure it stays in place */
    top: 0;
    left: 0;
    width: 100vw; /* Full viewport width */
    height: 100vh; /* Full viewport height */
    z-index: -1; /* Places the background behind other content */
}

/* Add padding to the top of the content area */
.content-padding {
    padding-top: 56px; /* Adjust based on your header height */
}

/* Navbar Design */
.navbar-nav {
    width: 100%;
}

.navbar-nav .nav-link {
    flex: 1;
    text-align: center; /* Center the text in each link */
    align-items: center;
}

.no-underline {
    text-decoration: none !important; /* Remove underline */
}

/* Home Slogan Styling */
.home-slogan {
    text-align: center; /* Center align text */
    color: #fff; /* White color */
    text-transform: uppercase;
    padding: 150px; /* Adjust padding as needed */
}

.line-one {
    display: block; /* Ensures this line breaks to a new line */
    font-size: 5rem; /* Font size for the first line */
    font-weight: bold; /* Bold font weight */
    margin: 0; /* Remove margins */
    line-height: 1; /* Adjust line height */
    color: transparent; /* Make text transparent to show only outline */
    text-shadow: 
        -1px -1px 0 #ffffff,  
        1px -2px 0 #587bb9,
        -2px 1px 0 #7d123b,
        1px 1px 0 #13223b; /* Outline color */
}

.line-two {
    display: block; /* Ensures this line breaks to a new line */
    font-size: 7rem; /* Font size for the second line */
    font-weight: bolder; /* Bolder font weight */
    color: #ee2873;
    margin: 0; /* Remove margins */
    line-height: 1; /* Adjust line height */
}

.line-three {
    display: block; /* Ensures this line breaks to a new line */
    font-size: 1.5rem; /* Font size for the third line */
    font-weight: normal; /* Normal font weight */
    color: white;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.7); /* Optional text shadow */
    margin-top: 40px; /* Space from the previous line */
    margin-right: 25%;
    margin-left: 25%;
    text-transform: none;
} 

import { useState, useEffect } from "react";
import { Container, ListGroup, Button, Form, Row, Col, Dropdown, Alert, Card } from 'react-bootstrap';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faUser } from '@fortawesome/free-solid-svg-icons';
// import './update.css';
// import '../navy-1.png';
// import employeeImage from '../profile.png'; // Import your image
// import navyBackground from '../navy-1.png'; // Import navy background image
export function Update() {

    const [account, setAccount] = useState([]);
    const [selectedEmployeeIndex, setSelectedEmployeeIndex] = useState(null); // Track selected employee index
    const [selectedItemKey, setSelectedItemKey] = useState(null);
    const [newValue, setNewValue] = useState('');
    const [showUpdateForm, setShowUpdateForm] = useState(false);
    const [lastName, setLastName] = useState('');
    const [firstName, setFirstName] = useState('');
    const [error, setError] = useState(false)

    useEffect(() => {
        const retrieveAccounts = async (e) => {
            if (e) {
                e.preventDefault();
            }

            try {
                const response = await fetch('https://zx814esxf6.execute-api.us-east-1.amazonaws.com/CORS-Enabled/getAllEmployeeAccounts');

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                const data = await response.json();
                setAccount(data); // Assuming data is an array of accounts
            } catch (error) {
                console.error('Error:', error);
                // setError(error.message); // Uncomment if you have an error state
            }
        };
        retrieveAccounts()
    }, []);

    const handleEmployeeSelect = (last_name, first_name, index) => {
        setSelectedEmployeeIndex(last_name);
        setLastName(last_name);
        setFirstName(first_name);
        setSelectedItemKey(null); // Reset selectedItemKey when a new employee is selected
        setShowUpdateForm(false); // Hide update form when a new employee is selected
    };

    const updateValue = async () => {
        if (lastName !== null && firstName !== null && selectedItemKey !== null && newValue !== '') {
            try {
                const empId = lastName; // Replace with actual employee ID from your account data
                const attributeName = selectedItemKey;
                console.log(selectedItemKey)
                console.log(newValue)
                console.log(lastName)
                const params = {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        // "employeeId": "empId",
                        // "TableName": "'employee_accounts'",
                        attributeName: attributeName,
                        value: newValue
                    })
                };

                const response = await fetch(`https://zx814esxf6.execute-api.us-east-1.amazonaws.com/CORS-Enabled/updateAccount?employeeId=${empId}`, params);
                console.log(response)
                if (!response.ok) {
                    setError(true)
                    setShowUpdateForm(false)
                    throw new Error('Network response was not ok');
                }

                const updatedData = await response.json();
                console.log('Updated data:', updatedData);

                // Update local state with new value
                const updatedAccount = account.map(emp => {
                    if (emp['pk'] === lastName && emp['First Name'] === firstName) {
                        return {
                            ...emp,
                            [attributeName]: newValue
                        };
                    }
                    return emp;
                });

                setAccount(updatedAccount);
                setNewValue('');
                setShowUpdateForm(false);
            } catch (error) {
                console.error('Error updating value:', error);
                setError(true)
                setShowUpdateForm(false)
                // Handle error state if needed
            }
        } else {
            console.error('Missing required fields for update');
            // Handle missing fields error state if needed
        }
    };

    return (
        <>
            <div className="update-background-image">

                <Container fluid >
                    <h2 className='mt-5 fs-0 text-light mt-5 pt-3'>Update Employee Profiles</h2>
                    /* <Dropdown>
                        <Dropdown.Toggle variant="info" id="dropdown-basic" className="text-primary">
                            Select Employee
                        </Dropdown.Toggle>
                        <Dropdown.Menu>
                            {account.map((employee, index) => (
                                <Dropdown.Item key={index} onClick={() => handleEmployeeSelect(employee['pk'], employee['First Name'])}>
                                    {employee['pk']}, {employee['First Name']}
                                </Dropdown.Item>
                            ))}
                        </Dropdown.Menu>
                    </Dropdown> */
                    <div>
                        <Row >
                            <br />
                            {/* Left column for employee dropdown */}
                            <Col className="overlay-section">

                            </Col>

                            {/* Middle column for field dropdown and update text box */}
                            <div className="non-overlay-bottom">
                                {selectedEmployeeIndex !== null && (
                                    /* <Dropdown>
                                        <Dropdown.Toggle variant="primary" id="dropdown-basic">
                                            Select Field to Update
                                        </Dropdown.Toggle>
                                        <Dropdown.Menu>
                                            {account
                                                .filter(emp => emp['pk'] === lastName && emp['First Name'] === firstName)
                                                .map(emp => (
                                                    <div key={`${emp['pk']}-${emp['First Name']}`}>
                                                        {Object.entries(emp).map(([key, value]) => (
                                                            <Dropdown.Item key={key} onClick={() => {
                                                                setSelectedItemKey(key);
                                                                setShowUpdateForm(true);
                                                            }}>
                                                                {key}
                                                            </Dropdown.Item>
                                                        ))}
                                                    </div>
                                                ))
                                            }
                                        </Dropdown.Menu>
                                    </Dropdown> */
                                )}
                                {/*update buttons*/}
                                {showUpdateForm && selectedItemKey !== null && (
                                    <div className="non-overlay-lowest">
                                        <Form.Group>
                                            <Form.Control
                                                type="text"
                                                placeholder={selectedItemKey}
                                                value={newValue}
                                                onChange={(e) => setNewValue(e.target.value)} />
                                        </Form.Group>
                                        <Button onClick={updateValue}>Update {selectedItemKey}</Button>

                                    </div>
                                )}
                                {(error) && (
                                    <div className="non-overlay-lowest">
                                        <Alert variant="danger" onClose={() => setError(false)} dismissible>
                                            <div>Error Updating Item!</div>
                                        </Alert>
                                    </div>
                                )}

                            </div>

                            {/* Right column for employee info */}
                            <Col className="non-overlay">
                                {selectedEmployeeIndex !== null && (
                                    <Container>
                                        <h2 className="white-text">Employee Information</h2>
                                        <ListGroup style={{ opacity: "75%" }}>
                                            {account
                                                .filter(emp => emp['pk'] === lastName && emp['First Name'] === firstName)
                                                .map(emp => (
                                                    <div key={`${emp['pk']}-${emp['First Name']}`}>
                                                        {Object.entries(emp).map(([key, value]) => (
                                                            <ListGroup.Item key={key}>
                                                                <Row>
                                                                    <Col sm={6}>
                                                                        <h5>{key}:</h5>
                                                                    </Col>
                                                                    <Col sm={6}>
                                                                        <h5>{value}</h5>
                                                                    </Col>
                                                                </Row>
                                                            </ListGroup.Item>
                                                        ))}
                                                    </div>
                                                ))
                                            }
                                        </ListGroup>
                                    </Container>
                                )}
                            </Col>
                        </Row>
                    </div>
                </Container>
            </div>


        </>
    );
}